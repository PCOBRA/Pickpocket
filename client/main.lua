local ESX = exports["es_extended"]:getSharedObject()

-- H√†m t√¨m NPC g·∫ßn nh·∫•t
function GetClosestNPC(coords)
    local pedList = GetGamePool('CPed')
    local closestPed = nil
    local closestDist = 3.0 -- B√°n k√≠nh t·ªëi ƒëa

    for _, ped in ipairs(pedList) do
        if DoesEntityExist(ped) and not IsPedAPlayer(ped) then
            local pedCoords = GetEntityCoords(ped)
            local dist = #(coords - pedCoords)

            if dist < closestDist then
                closestPed = ped
                closestDist = dist
            end
        end
    end

    return closestPed
end

local cooldownActive = false
local isPickpocketing = false -- Bi·∫øn ki·ªÉm tra tr·∫°ng th√°i m√≥c t√∫i

RegisterNetEvent('pickpocket:cancelAction')
AddEventHandler('pickpocket:cancelAction', function()
    if isPickpocketing then -- Ch·ªâ h·ªßy n·∫øu ƒëang th·ª±c hi·ªán h√†nh ƒë·ªông m√≥c t√∫i
        ClearPedTasksImmediately(PlayerPedId()) -- H·ªßy ngay animation n·∫øu c√≥
        isPickpocketing = false -- Reset tr·∫°ng th√°i
        TriggerEvent('ox_lib:notify', {
            title = "H√†nh ƒë·ªông b·ªã h·ªßy!",
            description = "B·∫°n kh√¥ng th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y!",
            type = "error",
            position = "center-right"
        })
    end
end)

RegisterCommand('pickpocket', function()
    if isPickpocketing then
        return -- Kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o n·∫øu kh√¥ng ƒëang th·ª±c hi·ªán m√≥c t√∫i
    end
    
    local playerPed = PlayerPedId()
    local playerData = ESX.GetPlayerData()
    if not playerData or not playerData.job then return end
    
    local playerJob = string.lower(playerData.job.name) -- Chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng
    
    -- Ki·ªÉm tra n·∫øu ngh·ªÅ b·ªã c·∫•m ngay t·ª´ ƒë·∫ßu
    for _, job in ipairs(Config.BlacklistedJobs) do
        if playerJob == string.lower(job) then
            TriggerEvent('ox_lib:notify', {
                title = "C·∫£nh b√°o",
                description = "B·∫°n kh√¥ng th·ªÉ th·ª±c hi·ªán h√†nh ƒë·ªông n√†y!",
                type = "error",
                position = "center-right"
            })
            return
        end
    end
    
    local coords = GetEntityCoords(playerPed)
    local npc = GetClosestNPC(coords) -- T√¨m NPC g·∫ßn nh·∫•t

    if not npc or not DoesEntityExist(npc) or not IsPedDeadOrDying(npc, true) then
        return -- Kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o n·∫øu NPC kh√¥ng h·ª£p l·ªá
    end

    isPickpocketing = true -- ƒê√°nh d·∫•u ƒëang m√≥c t√∫i
    TriggerServerEvent('pickpocket:checkPolice', NetworkGetNetworkIdFromEntity(npc))
end, false)

RegisterNetEvent('pickpocket:startProgress')
AddEventHandler('pickpocket:startProgress', function()
    local playerPed = PlayerPedId()
    RequestAnimDict("amb@prop_human_bum_bin@idle_b")
    while not HasAnimDictLoaded("amb@prop_human_bum_bin@idle_b") do
        Wait(10)
    end
    TaskPlayAnim(playerPed, "amb@prop_human_bum_bin@idle_b", "idle_d", 8.0, 8.0, -1, 1, 0, false, false, false)

    -- Hi·ªÉn th·ªã progress bar
    local success = exports['ox_lib']:progressBar({
        duration = 60000, -- 60 gi√¢y
        label = "ƒêang m√≥c t√∫i...",
        useWhileDead = false,
        canCancel = false,
        disableMovement = true,
        disableCombat = true
    })

    ClearPedTasks(playerPed)
    isPickpocketing = false -- Reset tr·∫°ng th√°i sau khi ho√†n th√†nh

    if success then
        TriggerServerEvent('pickpocket:attempt')
    else
        TriggerEvent('ox_lib:notify', {
            title = "M√≥c t√∫i",
            description = "B·∫°n ƒë√£ h·ªßy h√†nh ƒë·ªông!",
            type = "error",
            position = "center-right"
        })
    end
end)

RegisterNetEvent('pickpocket:notifyPolice')
AddEventHandler('pickpocket:notifyPolice', function()
    PlaySoundFrontend(-1, "TIMER_STOP", "HUD_MINI_GAME_SOUNDSET", true)
    lib.notify({
        title = "üö® C·∫£nh b√°o m√≥c t√∫i!",
        description = "C√≥ b√°o c√°o v·ªÅ m·ªôt v·ª• m√≥c t√∫i g·∫ßn ƒë√¢y!",
        type = "warning",
        position = "center-right",
        duration = 7000
    })
end)

RegisterNetEvent('pickpocket:setPoliceBlip')
AddEventHandler('pickpocket:setPoliceBlip', function(coords)
    local blip = AddBlipForCoord(coords.x, coords.y, coords.z)
    SetBlipSprite(blip, 161)
    SetBlipColour(blip, 1)
    SetBlipScale(blip, 1.2)
    SetBlipAsShortRange(blip, false)
    BeginTextCommandSetBlipName("STRING")
    AddTextComponentString("üö® V·ª• m√≥c t√∫i")
    EndTextCommandSetBlipName(blip)
    PulseBlip(blip)
    Wait(60000)
    RemoveBlip(blip)
end)

RegisterKeyMapping('pickpocket', '<FONT FACE = "arial font">~y~M√≥c t√∫i NPC', 'keyboard', 'E')
